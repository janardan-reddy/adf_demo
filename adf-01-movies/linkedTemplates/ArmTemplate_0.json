{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-01-movies"
		},
		"ls_sa_container01_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_sa_container01'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ls_sa_container01')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "points out to storageacocunt01demo01/container01 container",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_sa_container01_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_links')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sa_container01",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "movies"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "links.csv",
						"folderPath": "input",
						"container": "container01"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "movieId",
						"type": "String"
					},
					{
						"name": "imdbId",
						"type": "String"
					},
					{
						"name": "tmdbId",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sa_container01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_movies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sa_container01",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "movies"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "movies.csv",
						"folderPath": "input",
						"container": "container01"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "movieId",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sa_container01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sa_container01",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "common"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "container01"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sa_container01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_ratings')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sa_container01",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "movies"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ratings.csv",
						"folderPath": "input",
						"container": "container01"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "userId",
						"type": "String"
					},
					{
						"name": "movieId",
						"type": "String"
					},
					{
						"name": "rating",
						"type": "String"
					},
					{
						"name": "timestamp",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sa_container01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_sales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sa_container01",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "sales"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "sales_data_sample.csv",
						"folderPath": "input",
						"container": "container01"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ORDERNUMBER",
						"type": "String"
					},
					{
						"name": "QUANTITYORDERED",
						"type": "String"
					},
					{
						"name": "PRICEEACH",
						"type": "String"
					},
					{
						"name": "ORDERLINENUMBER",
						"type": "String"
					},
					{
						"name": "SALES",
						"type": "String"
					},
					{
						"name": "ORDERDATE",
						"type": "String"
					},
					{
						"name": "STATUS",
						"type": "String"
					},
					{
						"name": "QTR_ID",
						"type": "String"
					},
					{
						"name": "MONTH_ID",
						"type": "String"
					},
					{
						"name": "YEAR_ID",
						"type": "String"
					},
					{
						"name": "PRODUCTLINE",
						"type": "String"
					},
					{
						"name": "MSRP",
						"type": "String"
					},
					{
						"name": "PRODUCTCODE",
						"type": "String"
					},
					{
						"name": "CUSTOMERNAME",
						"type": "String"
					},
					{
						"name": "PHONE",
						"type": "String"
					},
					{
						"name": "ADDRESSLINE1",
						"type": "String"
					},
					{
						"name": "ADDRESSLINE2",
						"type": "String"
					},
					{
						"name": "CITY",
						"type": "String"
					},
					{
						"name": "STATE",
						"type": "String"
					},
					{
						"name": "POSTALCODE",
						"type": "String"
					},
					{
						"name": "COUNTRY",
						"type": "String"
					},
					{
						"name": "TERRITORY",
						"type": "String"
					},
					{
						"name": "CONTACTLASTNAME",
						"type": "String"
					},
					{
						"name": "CONTACTFIRSTNAME",
						"type": "String"
					},
					{
						"name": "DEALSIZE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sa_container01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_movies')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "movies graphical data transformations",
				"folder": {
					"name": "movies"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dataset_movies",
								"type": "DatasetReference"
							},
							"name": "movies",
							"description": "get movies data from movies dataset"
						},
						{
							"dataset": {
								"referenceName": "dataset_links",
								"type": "DatasetReference"
							},
							"name": "links",
							"description": "get links data from dataset_links"
						},
						{
							"dataset": {
								"referenceName": "dataset_ratings",
								"type": "DatasetReference"
							},
							"name": "ratings",
							"description": "get ratings data from dataset_ratings"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dataset_output",
								"type": "DatasetReference"
							},
							"name": "finalResultSink",
							"description": "saving data to finalResult.csv of same container under output folder"
						}
					],
					"transformations": [
						{
							"name": "moviesLinks",
							"description": "combining movies and links base don movieid"
						},
						{
							"name": "moviesLinksRatings",
							"description": "combines moviesLinks with Ratings based on movieid"
						},
						{
							"name": "movieOverallRating",
							"description": "calculates overall rating by movieid"
						},
						{
							"name": "requiredAttributes",
							"description": "fetching only required attributes (not considering duplicate columns)"
						},
						{
							"name": "sortingMovies",
							"description": "sorting movies base don overall ratings"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movieId as integer,",
						"          title as string,",
						"          genres as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'sourceLocation') ~> movies",
						"source(output(",
						"          movieId as integer,",
						"          imdbId as integer,",
						"          tmdbId as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> links",
						"source(output(",
						"          userId as integer,",
						"          movieId as integer,",
						"          rating as double,",
						"          timestamp as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ratings",
						"movies, links join(movies@movieId == links@movieId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> moviesLinks",
						"moviesLinks, movieOverallRating join(movies@movieId == movieOverallRating@movieId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> moviesLinksRatings",
						"ratings aggregate(groupBy(movieId),",
						"     avgRating = avg(rating)) ~> movieOverallRating",
						"moviesLinksRatings select(mapColumn(",
						"          movieId = movies@movieId,",
						"          title,",
						"          genres,",
						"          imdbId,",
						"          tmdbId,",
						"          avgRating",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> requiredAttributes",
						"requiredAttributes sort(desc(avgRating, true)) ~> sortingMovies",
						"sortingMovies sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['finalResult.csv'],",
						"     truncate: true,",
						"     mapColumn(",
						"          movieId,",
						"          title,",
						"          genres,",
						"          imdbId,",
						"          tmdbId,",
						"          avgRating",
						"     ),",
						"     partitionBy('hash', 1)) ~> finalResultSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_movies')]",
				"[concat(variables('factoryId'), '/datasets/dataset_links')]",
				"[concat(variables('factoryId'), '/datasets/dataset_ratings')]",
				"[concat(variables('factoryId'), '/datasets/dataset_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_sales')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is to do transformation on sales data",
				"folder": {
					"name": "sales"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dataset_sales",
								"type": "DatasetReference"
							},
							"name": "sales",
							"description": "loads sales data from dataset_sales"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dataset_output",
								"type": "DatasetReference"
							},
							"name": "totalSalesByCountryAndProductLineSink",
							"description": "saving the final result at totalSalesByCountryAndProductLine.csv under output of container01 in same storage account"
						},
						{
							"dataset": {
								"referenceName": "dataset_output",
								"type": "DatasetReference"
							},
							"name": "totalSalesByYearAndQuatarSink",
							"description": "saving the final result at totalSalesByYearAndQuatar.csv under output of container01 in same storage account"
						}
					],
					"transformations": [
						{
							"name": "partitionData",
							"description": "Assigning ranks based on total sales per each quatar "
						},
						{
							"name": "partitionsByYearAndQuater",
							"description": "Partitioning data based on year and quatar"
						},
						{
							"name": "aggregationOnCountryAndProductType",
							"description": "partitioning data based on product line and country"
						},
						{
							"name": "partitionDataByCountry",
							"description": "Assigning ranks based on total sales by country"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ORDERNUMBER as integer,",
						"          QUANTITYORDERED as integer,",
						"          PRICEEACH as double,",
						"          ORDERLINENUMBER as integer,",
						"          SALES as double,",
						"          ORDERDATE as timestamp,",
						"          STATUS as string,",
						"          QTR_ID as integer,",
						"          MONTH_ID as integer,",
						"          YEAR_ID as integer,",
						"          PRODUCTLINE as string,",
						"          MSRP as integer,",
						"          PRODUCTCODE as string,",
						"          CUSTOMERNAME as string,",
						"          PHONE as string,",
						"          ADDRESSLINE1 as string,",
						"          ADDRESSLINE2 as string,",
						"          CITY as string,",
						"          STATE as string,",
						"          POSTALCODE as string,",
						"          COUNTRY as string,",
						"          TERRITORY as string,",
						"          CONTACTLASTNAME as string,",
						"          CONTACTFIRSTNAME as string,",
						"          DEALSIZE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     dateFormats: ['dd-MM-yyyy'],",
						"     preferredIntegralType: 'integer',",
						"     preferredFractionalType: 'double') ~> sales",
						"partitionsByYearAndQuater window(over(YEAR_ID),",
						"     desc(totalSales, true),",
						"     rank = denseRank()) ~> partitionData",
						"sales aggregate(groupBy(YEAR_ID,",
						"          QTR_ID),",
						"     totalOrders = sum(QUANTITYORDERED),",
						"          totalSales = sum(QUANTITYORDERED*PRICEEACH)) ~> partitionsByYearAndQuater",
						"sales aggregate(groupBy(PRODUCTLINE,",
						"          COUNTRY),",
						"     totalOrders = sum(QUANTITYORDERED),",
						"          totalSales = sum(QUANTITYORDERED * PRICEEACH)) ~> aggregationOnCountryAndProductType",
						"aggregationOnCountryAndProductType window(over(COUNTRY),",
						"     desc(totalSales, true),",
						"     rank = denseRank()) ~> partitionDataByCountry",
						"partitionDataByCountry sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['totalSalesByCountryAndProductLine.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          COUNTRY,",
						"          PRODUCTLINE,",
						"          totalOrders,",
						"          totalSales,",
						"          rank",
						"     ),",
						"     partitionBy('hash', 1)) ~> totalSalesByCountryAndProductLineSink",
						"partitionData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['totalSalesByYearAndQuatar.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          YEAR_ID,",
						"          QTR_ID,",
						"          totalOrders,",
						"          totalSales,",
						"          rank",
						"     ),",
						"     partitionBy('hash', 1)) ~> totalSalesByYearAndQuatarSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_sales')]",
				"[concat(variables('factoryId'), '/datasets/dataset_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_movies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "deals with movies dataset",
				"activities": [
					{
						"name": "dataflow_movies",
						"description": "invoking movies dataflow to do necessary transformations",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "dataflowName",
								"value": "dataflow_movies"
							}
						],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_movies",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"movies": {},
									"links": {},
									"ratings": {},
									"finalResultSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "movies"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-08T13:15:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_sales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "deals with sales pipeline",
				"activities": [
					{
						"name": "dataflow_sales",
						"description": "invoking sales dataflow to do necessary transformations",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_sales",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sales": {},
									"totalSalesByCountryAndProductLineSink": {},
									"totalSalesByYearAndQuatarSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "sales"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-08T13:15:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_sales')]"
			]
		}
	]
}